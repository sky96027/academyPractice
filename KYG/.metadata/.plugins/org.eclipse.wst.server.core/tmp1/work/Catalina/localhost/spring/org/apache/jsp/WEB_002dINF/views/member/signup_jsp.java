/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.56
 * Generated at: 2022-01-07 01:05:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class signup_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("	<meta charset=\"UTF-8\">\r\n");
      out.write("	<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("	<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("	<title>회원가입</title>\r\n");
      out.write("\r\n");
      out.write("	<link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.13.0/themes/base/jquery-ui.css\">\r\n");
      out.write("	<script src=\"https://code.jquery.com/ui/1.13.0/jquery-ui.js\"></script>\r\n");
      out.write("	<script src=\"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\r\n");
      out.write("	<style>\r\n");
      out.write("	</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<form class=\"container signup body\" action=\"");
      out.print(request.getContextPath());
      out.write("/signup\" method=\"post\">\r\n");
      out.write("		<h1 class=\"title text-center\">회원가입</h1>\r\n");
      out.write("		<div class=\"box\" style=\"height: 100px; border: 1px solid black;\">약관내용</div>\r\n");
      out.write("		<div class=\"form-group\">\r\n");
      out.write("			<div class=\"form-check-inline\">\r\n");
      out.write("				<label class=\"form-check-label\">\r\n");
      out.write("					<input type=\"checkbox\" class=\"form-check-input\" name=\"agree\">동의\r\n");
      out.write("				</label>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"form-group\">\r\n");
      out.write("			<input type=\"text\" class=\"form-control\" placeholder=\"아이디\" name=\"me_id\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user.me_id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"form-group\">\r\n");
      out.write("			<input type=\"password\" class=\"form-control\" placeholder=\"비밀번호\" name=\"me_pw\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user.me_pw}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"form-group\">\r\n");
      out.write("			<input type=\"password\" class=\"form-control\" placeholder=\"비밀번호확인\" name=\"me_pw2\">\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"form-group\">\r\n");
      out.write("			<input type=\"text\" class=\"form-control\" placeholder=\"이름\" name=\"me_name\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user.me_name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"form-group\">\r\n");
      out.write("			<input type=\"text\" class=\"form-control\" placeholder=\"생년월일\" name=\"me_birth\" id=\"birth\">\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"form-group\">\r\n");
      out.write("			<div class=\"form-check-inline\">\r\n");
      out.write("				<label class=\"form-check-label\">\r\n");
      out.write("					<input type=\"radio\" class=\"form-check-input\" name=\"me_gender\" value=\"남성\">남성\r\n");
      out.write("				</label>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"form-check-inline\">\r\n");
      out.write("				<label class=\"form-check-label\">\r\n");
      out.write("					<input type=\"radio\" class=\"form-check-input\" name=\"me_gender\" value=\"여성\">여성\r\n");
      out.write("				</label>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"form-group\">\r\n");
      out.write("			<div class=\"form-inline mb-2\">\r\n");
      out.write("				<input type=\"text\" id=\"postcode\" placeholder=\"우편번호\" class=\"form-control col-6\">\r\n");
      out.write("				<input type=\"button\" onclick=\"execDaumPostcode()\" value=\"우편번호 찾기\" class=\"form-control col-6\">\r\n");
      out.write("			</div>\r\n");
      out.write("			<input type=\"text\" id=\"address\" placeholder=\"주소\" class=\"form-control mb-2\">\r\n");
      out.write("			<input type=\"text\" id=\"detailAddress\" placeholder=\"상세주소\" class=\"form-control mb-2\">\r\n");
      out.write("			<input type=\"hidden\" name=\"me_address\">\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"form-group\">\r\n");
      out.write("			<input type=\"text\" class=\"form-control\" placeholder=\"전화번호(-를 포함하여 입력하세요.)\" name=\"me_phone\">\r\n");
      out.write("		</div>\r\n");
      out.write("		<button class=\"btn btn-outline-success col-12\">회원가입</button>\r\n");
      out.write("	</form>\r\n");
      out.write("	<script>\r\n");
      out.write("		$('form').submit(function(){\r\n");
      out.write("			var id = $('[name=me_id]').val().trim();\r\n");
      out.write("			var pw = $('[name=me_pw]').val().trim();\r\n");
      out.write("			var pw2 = $('[name=me_pw2]').val().trim();\r\n");
      out.write("			var name = $('[name=me_name]').val().trim();\r\n");
      out.write("			var birth = $('[name=me_birth]').val().trim();\r\n");
      out.write("			var genderObj = $('[name=me_gender]:checked');\r\n");
      out.write("			var gender = genderObj.length == 0 ? '' : genderObj.val();\r\n");
      out.write("			var isAgree = $('[name=agree]').is(':checked');\r\n");
      out.write("			//동의에 체크되지 않으면\r\n");
      out.write("			if(!isAgree){\r\n");
      out.write("				alert('동의에 체크해야합니다.');\r\n");
      out.write("				$('[name=agree]').focus();\r\n");
      out.write("				return false;\r\n");
      out.write("			}\r\n");
      out.write("			if(id == ''){\r\n");
      out.write("				alert('아이디를 입력하세요.');\r\n");
      out.write("				$('[name=me_id]').focus();\r\n");
      out.write("				return false;\r\n");
      out.write("			}\r\n");
      out.write("			if(pw == ''){\r\n");
      out.write("				alert('비밀번호를 입력하세요.');\r\n");
      out.write("				$('[name=me_pw]').focus();\r\n");
      out.write("				return false;\r\n");
      out.write("			}\r\n");
      out.write("			if(pw2 != pw){\r\n");
      out.write("				alert('비밀번호가 일치하지 않습니다.');\r\n");
      out.write("				$('[name=me_pw2]').focus();\r\n");
      out.write("				return false;\r\n");
      out.write("			}\r\n");
      out.write("			if(name == ''){\r\n");
      out.write("				alert('이름을 입력하세요.');\r\n");
      out.write("				$('[name=me_name]').focus();\r\n");
      out.write("				return false;\r\n");
      out.write("			}\r\n");
      out.write("			if(birth == ''){\r\n");
      out.write("				alert('생일을 입력하세요.');\r\n");
      out.write("				$('[name=me_birth]').focus();\r\n");
      out.write("				return false;\r\n");
      out.write("			}\r\n");
      out.write("			if(gender == ''){\r\n");
      out.write("				alert('성별을 선택하세요.');\r\n");
      out.write("				$('[name=me_gender]').focus();\r\n");
      out.write("				return false;\r\n");
      out.write("			}\r\n");
      out.write("			var address = $('#address').val() + ' ' +$('#detailAddress').val();\r\n");
      out.write("			$('[name=me_address]').val(address);\r\n");
      out.write("		});\r\n");
      out.write("		$('#birth').datepicker();\r\n");
      out.write("		$('#birth').datepicker('option','dateFormat', 'yy-mm-dd');\r\n");
      out.write("		function execDaumPostcode() {\r\n");
      out.write("			new daum.Postcode({\r\n");
      out.write("				oncomplete: function(data) {\r\n");
      out.write("					var addr = ''; // 주소 변수\r\n");
      out.write("					var extraAddr = ''; // 참고항목 변수\r\n");
      out.write("					if (data.userSelectedType === 'R') { // 사용자가 도로명 주소를 선택했을 경우\r\n");
      out.write("						addr = data.roadAddress;\r\n");
      out.write("					} else { // 사용자가 지번 주소를 선택했을 경우(J)\r\n");
      out.write("						addr = data.jibunAddress;\r\n");
      out.write("					}\r\n");
      out.write("					// 사용자가 선택한 주소가 도로명 타입일때 참고항목을 조합한다.\r\n");
      out.write("					if(data.userSelectedType === 'R'){\r\n");
      out.write("						// 법정동명이 있을 경우 추가한다. (법정리는 제외)\r\n");
      out.write("						// 법정동의 경우 마지막 문자가 \"동/로/가\"로 끝난다.\r\n");
      out.write("						if(data.bname !== '' && /[동|로|가]$/g.test(data.bname)){\r\n");
      out.write("								extraAddr += data.bname;\r\n");
      out.write("						}\r\n");
      out.write("						// 건물명이 있고, 공동주택일 경우 추가한다.\r\n");
      out.write("						if(data.buildingName !== '' && data.apartment === 'Y'){\r\n");
      out.write("								extraAddr += (extraAddr !== '' ? ', ' + data.buildingName : data.buildingName);\r\n");
      out.write("						}\r\n");
      out.write("					\r\n");
      out.write("					} \r\n");
      out.write("					// 우편번호와 주소 정보를 해당 필드에 넣는다.\r\n");
      out.write("					document.getElementById('postcode').value = data.zonecode;\r\n");
      out.write("					document.getElementById(\"address\").value = addr;\r\n");
      out.write("					// 커서를 상세주소 필드로 이동한다.\r\n");
      out.write("					document.getElementById(\"detailAddress\").focus();\r\n");
      out.write("				}\r\n");
      out.write("			}).open();\r\n");
      out.write("    }\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
